思考：

CPU：
线程池里面当任务满时，此时又来一个新任务，线程池是如何处理的? 具体有哪些策略? 这些策略又是如何实现的呢?
有几种处理策略：
1.排队：阻塞队列。有空闲的时候再拿，不就是那个take和put，如果是在公平的情况下，那肯定就是先进先出。这就是今天讲的队列。这时候我们就有两种方式，一个是无限的排队队列。（链表，千万别用。LinkedBlockingQueue，JDK的），还有一种就是有界（用数组来实现的），只处理我们开的空间大小，多了的继续抛出去。Integer.MAX=?2^32-1=21亿多，但是注意的是这个队列大小，别搞小了。就不够，大了就浪费。在一些小型系统，你知道数据请求量是不大的，可以用。
2.丢弃：不处理了，直接抛出去。

=====================================================================

什么是队列?

1.队列的定义：
定义：队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。队列中没有元素时，称为空队列。
队列的数据元素又称为队列元素。在队列中插入一个队列元素称为入队，从队列中删除一个队列元素称为出队。因为队列只允许在一端插入，在另一端删除，所以只有最早进入队列的元素才能最先从队列中删除，故队列又称为先进先出（FIFO—first in first out）线性表，LIFO。树
队列这个概念非常好理解。你可以把它想成排队买票，先来的先买，后来的人只能站末尾，不允许插队。先进者先出，这就是典型的“队列”。
栈：后进先出。

2.队列的特点
（1）线性表：链表或者数组
（2）FIFO

3.队列的分类
（1）顺序（单向）队列：（Queue） 只能在一端插入数据，另一端删除数据
（2）循环（双向）队列（Deque）：每一端都可以进行插入数据和删除数据操作

4.队列的基本操作：
我们知道，栈只支持两个基本操作：入栈push()和出栈pop()。
队列跟栈非常相似，支持的操作也很有限，最基本的操作也是两个：
入队enqueue()，放一个数据到队列尾部；
出队dequeue()，从队列头部取一个元素。

所以，队列跟栈一样，也是一种操作受限的线性表数据结构。作为一种非常基础的数据结构，队列的应用也非常广泛，特别是一些具有某些额外特性的队列，比如循环队列、阻塞队列、并发队列。它们在很多偏底层系统、框架、中间件的开发中，起着关键性的作用。

5.队列的实现方式：
顺序队列&链式:
链表就是可以无限扩容:内存 size大小控制。add 缓存；LRU

实战：使用数组实现一个队列

6.循环队列：
怎么判断队列已经满了?
head=tail-1
tail=n
两种方法：
加了一个实际的size变量就可以了。
画一个循环队列满了的图。
判断满：(tail+1)%n==head

怎么判断空?tail==head

7.优先队列：
回到排队的场景，有些vip客户，总是可以插队。抽奖的时候，
普通用户，vip用户，svip用户。
优先队列：其实也没你们想的那么难，其实就是在插入的时候排了序而已

8.阻塞队列：此种具有特殊特性的队列应用却比较广泛，比如阻塞队列和并发队列。阻塞队列其实就是在队列基础上增加了阻塞操作。简单来说，就是在队列为空的时候，从队头取数据会被阻塞。因为此时还没有数据可取，直到队列中有了数据才能返回；如果队列已经满了，那么插入数据的操作就会被阻塞，直到队列中有空闲位置后再插入数据，然后再返回。

=====================================================================

课后作业：
用链表实现来一个单向队列。

=====================================================================

队列的实现：队列在线程池中的应用
